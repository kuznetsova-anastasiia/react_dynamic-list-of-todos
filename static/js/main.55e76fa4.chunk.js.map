{"version":3,"sources":["types/SortType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortType","TodoList","todos","activeId","setActiveId","className","map","todo","id","title","completed","isActiveId","classNames","type","onClick","TodoFilter","query","changeSortType","changeQuery","onChange","event","target","value","All","Active","Completed","Object","values","current","toUpperCase","slice","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","useState","user","setUser","userId","useEffect","getUser","person","href","email","name","App","setTodos","activeTodo","setActiveTodo","sortType","setSortType","setQuery","todosFromServer","catch","reason","Error","changeActiveTodo","find","visibleTodos","filtered","filter","toLowerCase","includes","getVisibleTodos","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55e76fa4.chunk.js","sourcesContent":["export enum SortType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  activeId: number;\n  setActiveId: (id: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  activeId,\n  setActiveId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n\n          const isActiveId = id === activeId;\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': isActiveId,\n              })}\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => setActiveId(id)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far',\n                      { 'fa-eye-slash': isActiveId },\n                      { 'fa-eye': !isActiveId },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { SortType } from '../../types/SortType';\n\ntype Props = {\n  query: string,\n  changeSortType: (value: SortType) => void;\n  changeQuery: (value: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  changeSortType,\n  changeQuery,\n}) => {\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    switch (event.target.value) {\n      case SortType.All:\n        changeSortType(SortType.All);\n        break;\n\n      case SortType.Active:\n        changeSortType(SortType.Active);\n        break;\n\n      case SortType.Completed:\n        changeSortType(SortType.Completed);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelectChange}\n          >\n            {Object.values(SortType).map(current => (\n              <option value={current}>{`${current[0].toUpperCase() + current.slice(1)}`}</option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => changeQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => changeQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todo: Todo;\n  onClose: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User>();\n\n  const {\n    id,\n    completed,\n    title,\n    userId,\n  } = todo;\n\n  useEffect(() => {\n    getUser(userId)\n      .then(person => setUser(person));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { SortType } from './types/SortType';\nimport { getTodos } from './api';\n\nconst getVisibleTodos = (\n  todos: Todo[],\n  sortType: SortType,\n  query: string,\n): Todo[] => {\n  let filtered = todos;\n\n  if (sortType === SortType.Active) {\n    filtered = todos.filter(todo => !todo.completed);\n  }\n\n  if (sortType === SortType.Completed) {\n    filtered = todos.filter(todo => todo.completed);\n  }\n\n  return filtered.filter(todo => (\n    todo.title.toLowerCase().includes(query.toLowerCase())\n  ));\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [activeTodo, setActiveTodo] = useState<Todo>();\n  const [sortType, setSortType] = useState(SortType.All);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => setTodos(todosFromServer))\n      .catch(reason => Error(reason));\n  }, []);\n\n  const changeActiveTodo = (id: number) => {\n    setActiveTodo(todos.find(todo => todo.id === id));\n  };\n\n  const visibleTodos = getVisibleTodos(todos, sortType, query);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                changeSortType={setSortType}\n                changeQuery={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    activeId={activeTodo?.id || 0}\n                    setActiveId={changeActiveTodo}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {activeTodo && (\n        <TodoModal\n          todo={activeTodo}\n          onClose={() => changeActiveTodo(0)}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}