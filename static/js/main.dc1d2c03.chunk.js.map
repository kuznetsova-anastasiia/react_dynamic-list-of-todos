{"version":3,"sources":["types/SortType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","utils/getVisibleTodos.ts","index.tsx"],"names":["SortType","TodoList","todos","activeId","onActivateTodo","className","map","todo","id","title","completed","isActiveId","classNames","type","onClick","TodoFilter","query","onChangeSortType","onChangeQuery","handleSelectChange","useCallback","event","target","value","All","Active","Completed","onChange","Object","values","current","toUpperCase","slice","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","onClose","useState","user","setUser","isError","setIsError","isloading","setIsLoading","useEffect","getUserFromServer","a","userFromServer","shouldDisplayError","shouldDisplayModal","href","email","name","App","setTodos","activeTodoId","setActiveTodoId","sortType","setSortType","setQuery","isLoading","getTodosFromServer","todosFromServer","activeTodo","useMemo","find","changeActiveTodo","visibleTodos","filtered","filter","toLowerCase","includes","getVisibleTodos","shouldDisplayTodoList","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc1d2c03.chunk.js","sourcesContent":["export enum SortType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  activeId: number;\n  onActivateTodo: (id: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  activeId,\n  onActivateTodo,\n}) => {\n  return (\n    <table className=\"table is-hoverable is-striped m-3\">\n      <thead>\n        <tr>\n          <th className=\"is-info\">#</th>\n          <th className=\"is-info\">\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th className=\"is-info\">Title</th>\n          <th className=\"is-info\"> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n          const isActiveId = id === activeId;\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': isActiveId,\n              })}\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames({\n                    'has-text-success': completed,\n                    'has-text-danger': !completed,\n                  })}\n                >\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onActivateTodo(id)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far',\n                      { 'fa-eye-slash': isActiveId },\n                      { 'fa-eye': !isActiveId },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { SortType } from '../../types/SortType';\n\ntype Props = {\n  query: string,\n  onChangeSortType: (value: SortType) => void;\n  onChangeQuery: (value: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onChangeSortType,\n  onChangeQuery,\n}) => {\n  const handleSelectChange = useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement>) => {\n      switch (event.target.value) {\n        case SortType.All:\n          onChangeSortType(SortType.All);\n          break;\n\n        case SortType.Active:\n          onChangeSortType(SortType.Active);\n          break;\n\n        case SortType.Completed:\n          onChangeSortType(SortType.Completed);\n          break;\n\n        default:\n          break;\n      }\n    }, [],\n  );\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select is-black\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelectChange}\n          >\n            {Object.values(SortType).map(current => (\n              <option value={current}>\n                {`${current[0].toUpperCase() + current.slice(1)}`}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input is-black\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onChangeQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              aria-label=\"clear-search-button\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onChangeQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo;\n  onClose: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User>();\n  const [isError, setIsError] = useState(false);\n  const [isloading, setIsLoading] = useState(true);\n\n  const {\n    id,\n    completed,\n    title,\n    userId,\n  } = todo;\n\n  useEffect(() => {\n    const getUserFromServer = async () => {\n      try {\n        const userFromServer = await getUser(userId);\n\n        setUser(userFromServer);\n      } catch {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getUserFromServer();\n  }, []);\n\n  const shouldDisplayError = (!user || isError) && !isloading;\n  const shouldDisplayModal = !isloading && !isError && user;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isloading && (\n        <Loader />\n      )}\n\n      {shouldDisplayError && (\n        <div className=\"modal-card notification is-danger\">\n          <header className=\"modal-card-head\">\n            <div className=\"modal-card-title\">\n              Error\n            </div>\n            <button\n              aria-label=\"close-modal-button\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <article className=\"modal-card-body\">\n            <p className=\"block has-text-dark has-text-weight-medium\">\n              The error has happened...\n            </p>\n          </article>\n        </div>\n      )}\n\n      {shouldDisplayModal && (\n        <div className={classNames(\n          'modal-card',\n          'notification',\n          {\n            'is-success': completed,\n            'is-danger': !completed,\n          },\n        )}\n        >\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              aria-label=\"close-modal-button\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block has-text-dark\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block has-text-dark\" data-cy=\"modal-user\">\n              <strong className={classNames({\n                'has-text-success': completed,\n                'has-text-danger': !completed,\n              })}\n              >\n                {completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useState,\n  useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { SortType } from './types/SortType';\nimport { getTodos } from './api';\nimport { getVisibleTodos } from './utils/getVisibleTodos';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [activeTodoId, setActiveTodoId] = useState(0);\n  const [sortType, setSortType] = useState(SortType.All);\n  const [query, setQuery] = useState('');\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const getTodosFromServer = async () => {\n      try {\n        const todosFromServer = await getTodos();\n\n        setTodos(todosFromServer);\n      } catch {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getTodosFromServer();\n  }, []);\n\n  const activeTodo = useMemo(() => (\n    todos.find(({ id }) => id === activeTodoId)\n  ), [activeTodoId]);\n\n  const changeActiveTodo = useCallback((id: number) => {\n    setActiveTodoId(id);\n  }, []);\n\n  const visibleTodos = getVisibleTodos(todos, sortType, query);\n  const shouldDisplayTodoList = todos.length > 0 && !isError && !isLoading;\n\n  return (\n    <>\n      <div className=\"columns is-flex is-justify-content-center\">\n        <div className=\"column is-two-thirds m-6\">\n          <div className=\"panel is-info\">\n            <h1 className=\"title panel-heading\">Todos:</h1>\n\n            <div className=\"panel-block is-flex is-justify-content-center\">\n              <TodoFilter\n                query={query}\n                onChangeSortType={setSortType}\n                onChangeQuery={setQuery}\n              />\n            </div>\n\n            <div className=\"panel-block is-flex is-justify-content-center\">\n              {isLoading && !isError && (\n                <Loader />\n              )}\n\n              {isError && !isLoading && (\n                <p>Eror has happened...</p>\n              )}\n\n              {shouldDisplayTodoList && (\n                <TodoList\n                  todos={visibleTodos}\n                  activeId={activeTodoId}\n                  onActivateTodo={changeActiveTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {activeTodo && (\n        <TodoModal\n          todo={activeTodo}\n          onClose={() => changeActiveTodo(0)}\n        />\n      )}\n    </>\n  );\n};\n","import { SortType } from '../types/SortType';\nimport { Todo } from '../types/Todo';\n\nexport const getVisibleTodos = (\n  todos: Todo[],\n  sortType: SortType,\n  query: string,\n): Todo[] => {\n  let filtered = todos;\n\n  switch (sortType) {\n    case SortType.Active:\n      filtered = todos.filter(todo => !todo.completed);\n      break;\n\n    case SortType.Completed:\n      filtered = todos.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  return filtered.filter(todo => (\n    todo.title.toLowerCase().includes(query.toLowerCase())\n  ));\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}